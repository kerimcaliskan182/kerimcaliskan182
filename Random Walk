# In this code we start at the coordinates (0, 0). From there the codes generates a random number and according to that number it moves to either y, x, -y, -x. 

import math
import random
import numpy
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import time

x_f = 0
y_f = 0
step = 1


def distance(B, D):  # B = x_f , D = y_f
    return math.sqrt(B ** 2 + D ** 2)



def rmsd(B, D):
    S = 0
    for a in range(1, N):
        S += abs(B - D) ** 2

    return math.sqrt(S)

N = int(input("How many steps you want: "))

count = N 

print("Taking step number,", N, "square root of this number is,", math.sqrt(N))
time.sleep(1)
print("If you look every step after program starts you notice that every step rmsd value increase or decrease like square root of step number.")
time.sleep(4)

def ani(i):
    global locations
    global x_f
    global y_f
    global step 
    
    if i == 0:
        line, = ax.plot([], [], lw=2)
        ax.plot(0, 0, color='black', marker='o', linestyle='dashed')
        return line

    # This is main code no other library, other than random, used.
   
    print("\n---------Step ",step,"---------","\n")
    R = random.randrange(4)
    
    if R == 0:
        x_f -= 1
        print("Moving West")

    elif R == 1:
        y_f -= 1
        print("Moving South")

    elif R == 2:
        x_f += 1
        print("Moving East")

    elif R == 3:
        y_f += 1
        print("Moving North")

    
    print("Current point is ", (x_f, y_f))
    print("Current Distance from origin is: ", distance(x_f, y_f))  
    print("rmsd value is: ", rmsd(x_f, y_f), "\n")

    step+=1

    #from here animation code continues.

    move = direction[R]
    nextloc = [locations[-1] + move]
    locations = numpy.append(locations, nextloc, axis=0)

    x_d = locations[:, 0]
    y_d = locations[:, 1]

    ax.cla()

    ax.set_xlim(min(-10, min(x_d) - 1), max(10, max(x_d) + 1))
    ax.set_ylim(min(-10, min(y_d) - 1), max(10, max(y_d) + 1))

    line, = ax.plot([], [], lw=2)
    line.set_data(x_d, y_d)
    ax.plot(locations[-1, 0], locations[-1, 1], color='black', marker='p', linestyle='dashed')

    return line


locations = numpy.zeros((1, 2))
direction = numpy.array([[-1, 0], [0, -1], [1, 0], [0, 1]])


fig, ax = plt.subplots()
ax.set_xlim(-10, 10)
ax.set_ylim(-10, 10)
anim = animation.FuncAnimation(fig, ani, frames=count + 1, interval=500, repeat=False)


plt.show()
